; Update parallax background timers
; Run once per increment of ScrollX
incParallax:
	ld a, [GlobalTimer]
	ld b, a
	ld hl, ParallaxLayer1

.Layer1:
	; Top updates every 4 frames
	and a, %11
	jr nz, .Layer2
	inc [hl]
.Layer2:
	inc hl
	ld b, a
	call Modulo3
	sub a, 0
	jr nz, .Layer3
	inc [hl]
.Layer3:
	inc hl
	bit 0, a
	jr nz, .return
	inc [hl]
.return:
	ret

; Update parallax background timers
; Run once per decrement of ScrollX
decParallax:
	ld a, [GlobalTimer]
	ld b, a
	ld hl, ParallaxLayer1

.Layer1:
	; Top updates every 4 frames
	and a, %11
	jr nz, .Layer2
	dec [hl]
.Layer2:
	inc hl
	ld b, a
	call Modulo3
	sub a, 0
	jr nz, .Layer3
	dec [hl]
.Layer3:
	inc hl
	bit 0, a
	jr nz, .return
	dec [hl]
.return:
	ret	

; LCD STAT interupt routine
scrollLayer:
	; Set next HBLANK interrupt
	ld hl, StatNextLineOff

	; Load table offset into DE
	ld a, [hl+] 
	ld d, a
	ld a, [hl+] ; HL points to StatXOff
	ld e, a

	; Load value
	ld a, [de]
	ldh [GB_SCANLINE_TRIGGER], a

	; Store incremented pointer
	inc de
	ld a, d
	ld [StatNextLineOff], a
	ld a, e
	ld [StatNextLineOff+1], a

	; Set scroll position
	ld a, [hl+] 
	ld d, a
	ld a, [hl+]
	ld e, a

	ld a, [de]
	ldh [GB_SCROLL_X], a

	inc de
	ld a, d
	ld [StatXOff], a
	ld a, e
	ld [StatXOff+1], a

	pop hl
	pop af
	reti

resetScrollLayer:
	; Reset scroll register
;	ld hl, ParallaxLayer1
;	ld a, [hl]
	xor a
	ldh [GB_SCROLL_X], a

initScrollLayer:

	; Next line table
	ld hl, scrolltables_standard_lines

	; Reset LYC register
	ld a, [hl]
	ldh [GB_SCANLINE_TRIGGER], a

	; Increment LYC pointer to next entry
	inc hl
	ld a, h
	ld [StatNextLineOff], a
	ld a, l
	ld [StatNextLineOff+1], a

	; X offsets
	ld hl, ParallaxLayer1
	ld a, h
	ld [StatXOff], a
	ld a, l
	ld [StatXOff+1], a

ret