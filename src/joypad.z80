
readJoypad:
    ; Stash old buttons
    ldh a, [JoypadButtons]
    ld [LastButtons], a

    ; read the d-pad:
    ld      a, P1F_5        ; bit 4 = 0, bit 5 = 1 (d-pad on, buttons off)
    ld      [rP1], a
    ; read the status of the d-pad
    ; we do several reads because of bouncing
    ld      a, [rP1]
    ld      a, [rP1]
    ld      a, [rP1]
    ld      a, [rP1]
    ld      a, [rP1]
    ld      a, [rP1]

    and     $0F             ; just keep low nibble (d-pad status)
    swap    a               ; swap low and high nibbles
    ld      b, a            ; save d-pad status in b register

    ; let's read the buttons
    ld      a, P1F_4        ; bit 4 = 1, bit 5 = 0 (buttons on, d-pad off)
    ld      [rP1], a

    ; bouncing...
    ld      a, [rP1]
    ld      a, [rP1]
    ld      a, [rP1]
    ld      a, [rP1]
    ld      a, [rP1]
    ld      a, [rP1]

    ; we have in "a" the status of the buttons
    and     $0F             ; just keep low nibble.
    or      b               ; OR with "b" to put in the high byte of "a"
                            ; the d-pad status.

    ; now we have in "a" the status of all the controls
    ; make the complement of it (so activated buttons read as 1)
    ; and save it 
    cpl
    ld      [JoypadButtons], a

    ; reset the joypad
    ld      a, P1F_5 | P1F_4
    ld      [rP1], a

; Increment streak counter if direction buttons are the same
.DirStreak:
    ldh a, [JoypadButtons]
    and a, $F0
    ld b, a
    ld a, [LastButtons]
    and a, $F0
    sub a, b
    jp nz, .killDirStreak

    ld a, [DirButtonStreak]
    inc a
    jr nz, .noCapDirStreak
    dec a

.noCapDirStreak
    ld [DirButtonStreak], a
    jr .JumpStreak

.killDirStreak
    xor a
    ld [DirButtonStreak], a

; Increment streak counter if jump button is the same
.JumpStreak
    ldh a, [JoypadButtons]
    and a, PADF_A
    ld b, a
    ld a, [LastButtons]
    and a, PADF_A
    sub a, b
    jp nz, .killJumpStreak

    ld a, [JumpButtonStreak]
    inc a
    jr nz, .noCapJumpStreak
    dec a

.noCapJumpStreak
    ld [JumpButtonStreak], a
    ret

.killJumpStreak
    xor a
    ld [JumpButtonStreak], a

    ret