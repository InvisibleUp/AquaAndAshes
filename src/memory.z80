; Fills a range in memory with a specified byte value.
; hl = destination address
; bc = byte count
; a = byte value
memset:
    inc c
    inc b
    jr .start
.repeat:
    ld [hl+], a
.start:
    dec c
    jr nz, .repeat
    dec b
    jr nz, .repeat
ret

; Copies count bytes from source to destination.
; de = destination address
; hl = source address
; bc = byte count
memcpy:
    inc c
    inc b
    jr .start
.repeat:
    ld a, [hl+]
    ld [de], a
    inc de
.start:
    dec c
    jr nz, .repeat
    dec b
    jr nz, .repeat
ret

;;; STRUCT TRAVERSAL HELPERS ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Macro for moving to a specific element
; No register use guarantee! (maybe except for A?)
; in a structure starting from a previous one
; \1 = Source address
; \2 = Dest address
; \3 = High register to increment
; \4 = Low register to increment
; TODO: Optimize for large distances
SeekStruct: MACRO
offset = \2 - \1
PRINTT "src: "
PRINTT "\1"
PRINTT "\tdst: "
PRINTT "\2"
PRINTT "\toffset: "
PRINTV offset
PRINTT "\n"
    
IF offset > 0
    .rept offset
        inc \3\4
    endr
ELIF offset < 0
    .rept offset
        dec \3\4
    endr
ENDC
ENDM

; Same as SeekStruct, except \1 is a SETable
SeekStructAndSet: MACRO
offset = \2 - \1
\1 = \1 + offset
    SeekStruct \1, \2, \3, \4
ENDM

; TODO: SeekStructAtHLWithLD(AndSet) 
; which is a terrible name for a macro that increments/
; decrements HL with a load before calling SeekStrut

;;; REGISTER/MEMORY LABEL DEFINITON HELPERS ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Defines names for a pair of registers
; $1 = Prefix name, all caps
; $2 = first register in pair
; $3 = second register in pair
; Defines names $1_hi, $1_lo, $1_reg, $1_ref
; Checks against variables $2.set, $3.set

define(`echo', $1)

define(`RegisterPair', `
    ifdef(`$2_set', FAIL "$2 is already set!")
    ifdef(`$3_set', FAIL "$3 is already set!")

    define(`$2_set', 1)
    define(`$3_set', 1)

    define(`$1_set', 1)
    define(`$1_hi', $2)
    define(`$1_lo', $3)
    define(`$1_reg', $2`'$3)
    define(`$1_ref', [$2`'$3])
')

; Marks a macro pair as invalid
; $1 = Prefix name, all caps
define(`InvalidatePair', `
    undefine(`$1_set')
    undefine($1_hi`'_set)
    undefine(`$1_hi')
    undefine($1_lo`'_set)
    undefine(`$1_lo')
    undefine(`$1_reg')
    undefine(`$1_ref')
')

; Moves a pair to another set of registers, with contents
; $1 = old pair name
; $2 = new pair lo
; $3 = new pair hi
define(`MovePair', `
    ifdef(`$2_set', FAIL "$2 is already set!")
    ifdef(`$3_set', FAIL "$3 is already set!")

    ld $2, $1_hi
    ld $3, $1_lo

    InvalidatePair($1)
    RegisterPair($1, $2, $3)
')

; Registers a single register
; $1 = label name
; $2 = register
define(`RegisterSingle', `
    ifdef(`$2_set', FAIL "$2 is already set!")

    define(`$1_set', 1)
    define(`$2_set', 1)
    define(`$1_reg', $2)
')

; Unregisters a single register
; $1 = label name
define(`InvalidateSingle', `
    undefine($1_reg`'_set)
    undefine(`$1_reg')
    undefine(`$1_set')
')

;TestFunction:
;	RegisterPair(TMP1, b, c)
;	RegisterPair(TMP2, d, e)
;	RegisterPair(TMP3, h, l)
;	InvalidatePair(TMP1)
;	InvalidatePair(TMP2)
;	RegisterPair(TMP1, d, e)
;	MovePair(TMP3, b, c)
;	InvalidatePair(TMP1)
;	InvalidatePair(TMP3)
;ret