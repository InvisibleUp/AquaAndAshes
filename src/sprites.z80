; hl = object RAM pointer
; uses A register as scratch
; uses D register for temp storage
; uses E register for temp storage
GetScreenX:
	push de
	push hl
	; Load FieldX into hl
	ld hl, FieldX
	ld a, [hl+]
	ld l, [hl]
	ld h, a

	; Divide by 2 so that it lines up with path scrolling
	srl h ; Store bit 0 into carry
	rr  l ; Load bit 7 from carry

	; Load ObjX into de from stack
	pop bc
	push bc
	ld a, [bc]
	inc bc
	ld d, a
	ld a, [bc]
	inc bc
	ld e, a

	; ObjX - FieldX (as -FieldX + ObjX)
	;NegateHL
	add hl, de

	; Get low byte and exit
	ld a, l
	pop hl
	pop de
ret

; Replaces prepare and the various render routines
; HiRAM has a lot of variables, but no inputs
; de = output sprite location [input]
; hl = input object location [input]
PrepareObject:
	; Stash output so we have some more registers
	push de

	; Load attributes into HiRAM
	ld a, [hl+] ; @ charY
	ldh [SpriteAttribs], a

	; Load Y into HiRAM
	ld a, [hl+] ; @ charX
	ldh [SpriteY], a

	; Calculate X and load into HiRAM
	call GetScreenX ; @ charAnim
	ldh [SpriteX], a

	; Get the animation number
	ld a, [hl+] ; @ charAnimFrame
	; Multiply by 2 because words
	sla a

	; Get animation frame and load into HiRAM
	ld a, [hl+]
	sla a
	ldh [SpriteFrame], a

	; Stash HL
	push hl

	; Look up the animation offset
	ld d, HIGH(animations_pointers_start)
	add a, LOW(animations_pointers_start)
	jr nc, .nocarry_1
	inc d
.nocarry_1
	ld e, a

	; Get pointer to animation table into bc
	; de is now free
	ld a, [de]
	ld c, a
	inc de
	ld a, [de]
	ld b, a

	; Get number of sprites and number of frames
	ld a, [bc]
	inc bc
	inc a ; For loop later
	ldh [SpriteCount], a ; Stash

	ld a, [bc]
	inc bc
	sla a
	ldh [SpriteSize], a

	inc bc ; Skip loop point

	; Determine if we need to skip to right-facing mappings
	ld a, [SpriteAttribs]
	and a, %10000
	jr nz, .skipRightAdjust

	ld a, [bc]
	sla a
	add a, c
	ld c, a
	jr nc, .nocarry_2
	inc b
.nocarry_2:
.skipRightAdjust:
	inc bc ; Get to start of mapping list

	ld hl, sp+2 ; HL = OAM buffer
	ld a, [hl+]
	ld d, a
	ld a, [hl]
	ld h, a
	ld l, d
.loop:
	; Out of sprites?
	ldh a, [SpriteCount]
	dec a
	jr z, .endloop
	ldh [SpriteCount], a

	; de = bc (mapping list) + sprite no.
	sla a
	add a, c
	ld d, b
	ld e, a
	jr nc, .nocarry_3
	inc d
.nocarry_3:
	push bc ; Don't need this right now, do need registers

	; Read mapping data for this frame
	ld a, [de]
	ld c, a
	inc de
	ld a, [de]
	ld b, a
	; de free, bc = mapping offset

	; Get number of sub-sprites
	ld a, [bc]
	ld d, a ; D is loop counter
	inc bc

.loop_subsprite:
	; Okay now we can finally write our output to OAM
	; Using E as temp

	ld a, [bc] ; Y (adjust with stashed)
	ld e, a
	ldh a, [SpriteY]
	add a, e
	ld [hl+], a
	inc bc

	ld a, [bc] ; X (adjust with stashed)
	ld e, a
	ldh a, [SpriteX]
	add a, e
	ld [hl+], a
	inc bc

	ld a, [bc] ; Tile
	ld [hl+], a
	inc bc

	ld a, [bc] ; Metadata
	ld [hl+], a
	inc bc

	dec d
	jr nz, .loop_subsprite
.endloop_subsprite:

	; And now get the next sprite
	pop bc
	ldh a, [SpriteSize]
	add a, c
	ld c, a
	jr nc, .loop
	inc b
	jr .loop

.endloop:

	; Get new OAM output and unwind stack
	ld a, h
	ld d, a
	ld a, l
	ld e, a
	pop hl ; Object input
	pop bc ; OAM output

ret

; Clobbers literally everything
; de = output sprite location
; hl = input object location
PrepareAllObjects:
	ld d, HIGH(SpriteTable)
	ld e, LOW(SpriteTable)
	ld hl, charStruct
	
	; We're going to need to keep bc on the stack...
	ldh a, [ActiveObjectsCount]
	ld b, a
	ldh a, [ActiveObjectsBitfield]
	ld c, a
.loop:
	rl c
	jr nc, .checkdone
	dec c

	push bc
	call PrepareObject
	pop bc

.checkdone
	ret z
	jr .loop

; Don't call directly!
SpriteDMA:
	ld a, SpriteTable / $100
	ldh [$FF46], a ;start DMA transfer (starts right after instruction)
	ld  a, $28     ;delay...
.wait:                 ;total 5x40 cycles, approx 200ms
	dec a          ;1 cycle
	jr  nz, .wait  ;4 cycles
	ret
SpriteDMA_End: