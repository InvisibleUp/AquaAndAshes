include "src/constants.z80"
include "src/variables.z80"
include "src/gameboy.z80" ; GB constants

include "src/header.z80" ; ROM header

; Core Libraries
include "src/memory.z80"
include "src/display.z80"
include "src/math.z80"

; Game stuff
include "src/gfxinclude.z80"
include "src/sprites.z80"

SECTION "main", ROM0
; Interrupt handlers
vblank:
    ; Jumping here clears vblank flag automatically
    ;push hl
    ;ld hl, GB_SCROLL_X
    ;dec [hl]
    ;dec [hl]
    ;ld hl, GB_SCROLL_Y
    ;dec [hl]
    ;pop hl

    call RenderSprites
    reti

timer:
    push hl
    push bc
    push af

    ld hl, GlobalTimer
    inc [hl]
    ld b, [hl]
    ld c, $80 + charAnimSpeed
    and a, 8

.objloop:
    ld a, [$ff00+c] ; A = timer speed
    sub a, 0
    jr z, .updateobjtimer

    ld h, a
.shiftloop:
    srl b
    jr nc, .objloop_checkdone ; If all bits are not 1, don't update
    dec h
    jr nz, .shiftloop

.updateobjtimer
    inc c
    ld a, [$ff00+c] ; A = timer
    inc a
    ld [$ff00+c], a
    dec c

.objloop_checkdone:
    ld a, charSizeOf
    add a, c
    ld c, a
    ld a, $80 + (charStruct_end - charStruct) + charAnimSpeed
    cp a, c
    jr nz, .objloop

    pop af
    pop bc
    pop hl
    reti

; Main Loop
main:
    ; Set interrupts and timers
    xor a
    ld [GB_INTERRUPT_FLAG], a
    ld [GB_TIMER_MODULO], a
    ld a, GB_INTERRUPT_VBLANK | GB_INTERRUPT_TIMER
    ld [GB_INTERRUPT_ENABLE], a
    ld a, GB_TIMER_CTRL_START | GB_TIMER_CTRL_CLOCK_4096
    ld [GB_TIMER_CTRL], a

    ; Set stack to top of HiRAM
    ld sp, $FFFE

    di ; Interrupts need to be off for waiting to work
    call DisableLCD
    
    ; Set palette
    ld a, %11100100
    ld [GB_PALETTE_BG], a
    ld [GB_PALETTE_OBJ1], a
    ; Light palette
    rlca
    rlca
    ld [GB_PALETTE_OBJ2], a

    ; Set scroll position
    xor a
    ld [GB_SCROLL_X], a
    ld [GB_SCROLL_Y], a

    ; Clear RAM and VRAM
    ld hl, $C000
    ld bc, WramEnd - $C000
    xor a
    call memset

    ld hl, charStruct
    ld bc, charStruct_end - charStruct
    xor a
    call memset

    ld hl, $8000
    ld bc, $9FFF - $8000
    ld a, $FF
    call memset

    ld hl, $FE00
    ld bc, $FE9F - $FE00
    xor a
    call memset

    ; Load graphics
    ld hl, gfx_start
    ld de, GB_RAM_TILE
    ld bc, gfx_end - gfx_start
    call memcpy

    ; Make a dummy object
    ld c, $80
    ld a, %11000000
    ld [$ff00+c], a
    inc c
    ld a, 64
    ld [$ff00+c], a
    inc c
    xor a
    ld [$ff00+c], a
    inc c
    ld a, 64
    ld [$ff00+c], a

    ; Init display
    call InitDisplay
    ei

.loop:
    halt
    jr .loop
; End Main