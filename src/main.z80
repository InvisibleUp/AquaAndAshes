include "src/constants.z80"
include "src/variables.z80"
include "src/gameboy.z80" ; GB constants

include "src/header.z80" ; ROM header

; Core Libraries
include "src/memory.z80"
include "src/display.z80"
include "src/math.z80"

; Game stuff
include "src/gfxinclude.z80"
include "src/sprites.z80"
include "src/background.z80"
include "src/objects.z80"

SECTION "main", ROM0
; Interrupt handlers
vblank:
    ; Jumping here clears vblank flag automatically
    push af
    ld a, [WaitingForVBlank]
    jr nz, .return ; Lag!

    call $FF80 ; Update sprites
    
    ; Finish
    ld a, 1
    ld [WaitingForVBlank], a

.return:
    pop af
reti

lcdc:
    push af
    push hl

    ld hl, StatJmpLoc
    ld a, [hl+]
    ld l, [hl]
    ld h, a
    jp hl ; This better be valid...

updateTimer:
    ld hl, GlobalTimer
    inc [hl]
    ld b, [hl] ; B = Global Timer
    ld hl, charStruct + charAnimSpeed

    ldh a, [ActiveObjectsBitfield]
    ld e, a
    ldh a, [ActiveObjectsCount]
    ld c, a

    or a ; Are there any objects at all?
    ret z ; If not, just quit

.objloop:
    rl e ; Is object visible?
    jr nc, .objloop_checkdone
    dec c ; Reduce active objects count

    ld a, [hl] ; A = timer speed
    or a, a
    jr z, .updateobjtimer ; Always update

    ld d, a ; D = timer speed (# of iterations)
    ld a, b ; A = global timer
.shiftloop:
    rra
    jr nc, .objloop_checkdone ; If all bits are not 1, don't update
    dec d
    jr nz, .shiftloop

.updateobjtimer
    inc hl
    ld a, [hl] ; A = timer
    inc a
    ld [hl], a

.objloop_checkdone:
    ; Bump HL up to next object
    ld a, charSizeOf - (charAnimTimer + 1)
    add l
    ld l, a
    jr nc, .nocarry
    inc h
.nocarry:

    ld a, c
    or a ; Any objects left?
    jr nz, .objloop

ret

clearRAM:
   ; Clear RAM and VRAM
    xor a

    ld hl, WramStart
    ld bc, WramEnd - WramStart
    call memset

    ld hl, HramStart
    ld bc, HramEnd - HramStart
    call memset

    ; VRAM tiles
    ld hl, $8000
    ld bc, $9FFF - $8000
    call memset

    ; VRAM sprites
    ld hl, $FE00
    ld bc, $FE9F - $FE00
    call memset

    ret

LoadGFX:
    call DisableLCD

    ; Set palette
    ld a, %11100100
    ld [GB_PALETTE_BG], a
    ld [GB_PALETTE_OBJ1], a
    ; Light palette
    rlca
    rlca
    ld [GB_PALETTE_OBJ2], a

    ; Set scroll position
    xor a
    ld [GB_SCROLL_X], a
    ld [GB_SCROLL_Y], a

    ; Clear RAM
    call clearRAM

    ; Copy DMA code to WRAM
    ld hl, SpriteDMA
    ld de, $FF80
    ld bc, SpriteDMA_End - SpriteDMA
    call memcpy

    ; Load graphics
    ld hl, gfx_start
    ld de, GB_RAM_TILE
    ld bc, gfx_end - gfx_start
    call memcpy

    ld hl, font
    ld de, GB_RAM_TILE + $800
    ld bc, font_end - font
    call memcpy

    ld hl, bg_start
    ld de, GB_RAM_TILE + $1000
    ld bc, bg_end - bg_start
    call memcpy

    ; Load background
    ld de, bgmap_start
    ld hl, GB_RAM_MAP
    ld b, 18
.bgLoop_Row:
    ld c, 32
.bgLoop_Column:
    ld a, [de]
    ld [hl+], a
    dec c
    jr nz, .bgLoop_Column

    inc de
    dec b
    jr nz, .bgLoop_Row

    ; Lay down some text
    ld hl, GB_RAM_MAP + 32
    ld a, $85
    ld [hl+], a
    ld [hl+], a
    ld [hl+], a
    ld [hl+], a

    call InitDisplay
ret

; Main Loop
main:
    ; Set interrupts and timers
    xor a
    ldh [GB_INTERRUPT_FLAG], a
    ld a, GB_INTERRUPT_VBLANK | GB_INTERRUPT_STAT
    ldh [GB_INTERRUPT_ENABLE], a

    ; Set stack to top of WRAM
    ld sp, $DFFE

    ; Init PPU
    call LoadGFX

    ; Init objects
    ld hl, charStruct
    ld a, %11010000 ; Snowfox, facing left
    ld [hl+], a
    ld a, FieldHeight ; Y
    ld [hl+], a
    xor a ; X High
    ld [hl+], a
    ld a, $80 ; X low
    ld [hl+], a
    xor a ; Dx, Dy
    ld [hl+], a
    ld [hl+], a
    ld a, 3 ; Animation speed
    ld [hl+], a
    inc hl
;
;    ld a, %10000000 ; Gecko, facing right
;    ld [hl+], a
;    ld a, FieldHeight ; Y
;    ld [hl+], a
;    xor a ; X High
;    ld [hl+], a
;    ld a, $40 ; X low
;    ld [hl+], a
;    xor a ; Dx, Dy
;    ld [hl+], a
;    ld [hl+], a
;    ld a, 0 ; Animation speed
;    ld [hl+], a
;    inc hl

    ; Copy DMA code to WRAM
    ld hl, SpriteDMA
    ld de, $FF80
    ld bc, SpriteDMA_End - SpriteDMA
    call memcpy

    ; Set parallax interrupt
    ld hl, scrollLayer
	ld a, h
	ld [StatJmpLoc], a
	ld a, l
	ld [StatJmpLoc+1], a

    ; Set parallax data pointers
    call initScrollLayer

    ; Turn on parallax stuff now that it's safe-ish
    ld a, GB_LCD_STAT_SCANLINE_ENABLE
    ldh [GB_LCD_STAT], a 

    WaitForVBlank
    ei

.loop:
    ; Set parallax data pointers
    call resetScrollLayer

    ; Game logic
    call incFieldX

    ; Update timers and set active objects bitfield
    call GenerateActiveObjectsBitfield
    call updateTimer

    ; Prepare graphics data
    call PrepareAllObjects

    ; Wait for VBlank
    xor a
    ld [WaitingForVBlank], a
.VBlankWait
    halt
    ld a, [WaitingForVBlank]
    or a
    jr z, .VBlankWait

    jr .loop
; End Main